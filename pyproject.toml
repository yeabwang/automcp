[build-system]
requires = ["hatchling>=1.13.0"]
build-backend = "hatchling.build"

[project]
name = "automcp"
version = "1.0.0"
description = "Intelligent API Specification to MCP Tool Converter"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AutoMCP Team", email = "support@automcp.dev"},
]
maintainers = [
    {name = "AutoMCP Team", email = "support@automcp.dev"},
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "api",
    "openapi",
    "postman",
    "llm",
    "tools",
    "automation",
    "semantic-enrichment"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    
    # API parsing
    "prance>=23.0.0",
    "requests>=2.28.0",
    
    # LLM clients
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "groq>=0.4.0",
    
    # Data processing
    "structlog>=23.0.0",
    "tenacity>=8.0.0",
    "circuitbreaker>=1.4.0",
    
    # Security and validation
    "scrubadub>=2.0.0",
    "cryptography>=41.0.0",
    
    # Git operations (optional)
    "GitPython>=3.1.0",
    
    # Code analysis (optional)
    "griffe>=0.32.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "faker>=19.0.0",
    "respx>=0.20.0",  # HTTP mocking
]

# Performance monitoring
monitoring = [
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.32.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
]

# Enterprise features
enterprise = [
    "redis>=4.6.0",
    "pinecone-client>=2.2.0",
    "weaviate-client>=3.24.0",
    "kubernetes>=27.0.0",
]

# All optional dependencies
all = [
    "automcp[dev,docs,test,monitoring,enterprise]"
]

[project.urls]
Homepage = "https://github.com/yeabwang/AutoMCP"
Documentation = "https://automcp.readthedocs.io"
Repository = "https://github.com/yeabwang/AutoMCP"
"Bug Tracker" = "https://github.com/yeabwang/AutoMCP/issues"
Changelog = "https://github.com/yeabwang/AutoMCP/blob/main/CHANGELOG.md"

[project.scripts]
automcp = "automcp.cli:main"

[project.entry-points."automcp.plugins"]
# Plugin entry points for extensibility
openapi_parser = "automcp.core.parsers:OpenAPIParser"
postman_parser = "automcp.core.parsers:PostmanParser"

[tool.hatch.version]
path = "src/automcp/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/automcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/config",
    "/examples",
    "/scripts",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
]
exclude = [
    "/.github",
    "/.vscode", 
    "/.pytest_cache",
    "/build",
    "/dist",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    "__pycache__",
]

# =============================================================================
# Development Tools Configuration
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "FLY", # flynt
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
    "TID252", # relative imports from parent modules
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*.py" = ["ARG001", "ARG002", "FBT"]  # test-specific ignores

[tool.ruff.isort]
known-first-party = ["automcp"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.9"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "griffe.*",
    "prance.*", 
    "scrubadub.*",
    "circuitbreaker.*",
    "structlog.*",
    "tenacity.*",
    "groq.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=automcp",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that require LLM API access",
]

[tool.coverage.run]
source = ["automcp"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
